/**
 * analysis.js
 *
 * This script reads the output generated by script.js (e.g. "RE: small in and med up and small ptosis")
 * and converts it into:
 *
 * 1. A clinical diagnosis (based on deviation, ptosis and pupil details)
 * 2. A condition classification, for example:
 *    - 3rd nerve palsy conditions (all displayed in red):
 *         • sudden + down and out = possible 3rd nerve palsy
 *         • sudden + down and out + ptosis = probable 3rd nerve palsy
 *         • sudden + down and out + ptosis + larger/dilated pupil = definite 3rd nerve palsy
 *    - 4th nerve palsy: up and out (graded by the magnitude of the up movement)
 *    - 6th nerve palsy: inwards (eso) and sudden (graded by the magnitude), but only if there is no medium or large vertical deviation
 *    - Horner syndrome: if ptosis, faded iris and smaller pupil are detected,
 *         graded as possible, probable or definite based on the ptosis severity – note that if both eyes are equally small, they are considered neutral;
 *         however, if one eye is one step more constricted than the other, then that eye is flagged.
 *    - Other categories such as mixed squint or CNP if only minor signs are present.
 *
 * In addition, a separate pupil analysis is appended:
 *    - Bilateral pinhole pupils → likely due to age or drugs.
 *    - Bilateral dilated pupils → consider drugs or trauma.
 *    - Unilateral findings:
 *         • "slightly larger pupil" → benign anisocoria.
 *         • "larger pupil" → possible Adie’s pupil.
 *         • "dilated pupil" → suggest drugs or trauma.
 *         • If both eyes change equally (whether both are smaller or both larger), then anisocoria is treated as neutral.
 *
 * The overall analysis is updated every 500ms.
 */

/**
 * Transform the generated output text into a clinical diagnosis.
 * 
 * @param {string} text - The output from script.js (e.g. "RE: small in and med up and small ptosis")
 * @param {string} prefix - The eye prefix ("RE" or "LE")
 * @returns {string} - A diagnosis string, for example, "Small Esotropia, Medium Hypertropia, Slight Ptosis"
 */
function transformOutput(text, prefix) {
    const colonIndex = text.indexOf(":");
    if (colonIndex === -1) return text;
    let content = text.substring(colonIndex + 1).trim().toLowerCase();
  
    // When there is no input, default to "nil"
    if (content === "neutral" || content === "normal") return prefix + ": nil";
  
    let segments = content.split(" and ");
    let diagnoses = [];
  
    segments.forEach(segment => {
      segment = segment.trim();
      let grade = "";
      if (segment.startsWith("small")) {
        grade = "Small";
      } else if (segment.startsWith("medium") || segment.startsWith("med")) {
        grade = "Medium";
      } else if (segment.startsWith("large")) {
        grade = "Large";
      }
  
      if (segment.includes(" in") && !segment.includes("out")) {
        // Removed extra annotation for large esotropia.
        diagnoses.push(grade + " Esotropia");
      } else if (segment.includes(" out")) {
        // Removed extra annotation for large exotropia.
        diagnoses.push(grade + " Exotropia");
      } else if (segment.includes(" up")) {
        diagnoses.push(grade + " Hypertropia");
      } else if (segment.includes(" down")) {
        diagnoses.push(grade + " Hypotropia");
      } else if (segment.includes("ptosis")) {
        if (grade === "Small") {
          diagnoses.push("Slight Ptosis");
        } else {
          diagnoses.push(grade + " Ptosis");
        }
      }
    });
  
    if (diagnoses.length === 0) diagnoses.push("nil");
  
    return prefix + ": " + diagnoses.join(", ");
  }
  
/**
 * Determine a condition category based on the generated output text.
 *
 * @param {string} text - The output text from script.js.
 * @param {string} eyeType - The eye identifier ("LE" or "RE")
 * @returns {string} - The condition classification.
 */
function determineCondition(text, eyeType) {
    let content = text.toLowerCase();
  
    // If the output is neutral, return empty.
    if (content.includes("nil") || content.includes("normal") || content.includes("neutral")) {
      return "";
    }
  
    // Flags for detected features.
    // Include "lid" as an indicator for ptosis.
    let hasPtosis = content.includes("ptosis") || content.includes("lid");
    let hasSudden = content.includes("sudden");
    let hasDilated = content.includes("dilated");
  
    // Determine ptosis grade.
    let hasMedOrLargePtosis = content.includes("med ptosis") || content.includes("large ptosis");
  
    // Determine horizontal deviation.
    let horizontal = null;
    if (content.includes(" in") && !content.includes("out")) {
      horizontal = "eso";
    } else if (content.includes(" out")) {
      horizontal = "exo";
    }
  
    // Determine vertical deviation.
    let vertical = null;
    if (content.includes(" up")) {
      vertical = "hyper";
    } else if (content.includes(" down")) {
      vertical = "hypo";
    }
  
    // Flag for larger pupil.
    let hasLargePupil = content.includes("larger pupil") || hasDilated;
  
    // 3rd nerve palsy condition (displayed in red):
    // Must be down (hypo) and out (exo) with no conflicting " in " indicator, and the sudden toggle must be ON.
    const extraInfo = "; Sudden: vertical diplopia+ptosis; <span style='color:red;'>aneurysm</span>, <span style='color:orange;'>tumour, trauma</span>";
    if (vertical === "hypo" && horizontal === "exo" && !content.includes(" in ") && hasSudden) {
      if (!hasPtosis) {
        return "<span style='color:red;'>possible 3rd nerve palsy</span>" + extraInfo;
      } else {
        if (hasLargePupil && hasMedOrLargePtosis) {
          return "<span style='color:red;'>definite 3rd nerve palsy</span>" + extraInfo;
        } else {
          return "<span style='color:red;'>probable 3rd nerve palsy</span>" + extraInfo;
        }
      }
    }
  
    // 4th nerve palsy: up and out (not sudden).
    const subtleText = "; Subtle: angled diplopia+head tilt; 'congenital', trauma; look for nasal upshoot";
    if (vertical === "hyper" && horizontal === "exo") {
      if (content.includes("small up")) {
        return "possible 4th nerve palsy" + subtleText;
      } else if (content.includes("med up") || content.includes("medium up")) {
        return "probable 4th nerve palsy" + subtleText;
      } else if (content.includes("large up")) {
        return "definite 4th nerve palsy" + subtleText;
      } else {
        return "4th nerve palsy" + subtleText;
      }
    }
  
    // 6th nerve palsy: inwards (eso) and sudden, only if there is no medium or large vertical deviation.
    if (horizontal === "eso" && hasSudden &&
        !content.includes("med up") && !content.includes("medium up") &&
        !content.includes("large up") &&
        !content.includes("med down") && !content.includes("medium down") &&
        !content.includes("large down")) {
      const extraText = "; Sudden: horizontal diplopia+head turn; " +
                        "<span style='color:red;'>SOL/IIH - ICP</span>, " +
                        "<span style='color:orange;'>Temporal arteritis</span>, ear";
      if (content.includes("small in")) {
        return "<span style='color:red;'>possible 6th nerve palsy</span>" + extraText;
      } else if (content.includes("med in") || content.includes("medium in")) {
        return "<span style='color:red;'>probable 6th nerve palsy</span>" + extraText;
      } else if (content.includes("large in")) {
        return "<span style='color:red;'>definite 6th nerve palsy</span>" + extraText;
      } else {
        return "<span style='color:red;'>6th nerve palsy</span>" + extraText;
      }
    }
  
    // Horner syndrome block:
    // If a smaller pupil is detected, then:
    //   - With no ptosis/lid evidence → possible Horner syndrome
    //   - With ptosis/lid → probable Horner syndrome, unless "faded" is also present, then definite.
    if (content.includes("smaller pupil")) {
      const extraText = "; CAD, stroke, lung <i>> physical</i>";
      let hornerOutput = "";
      if (hasPtosis) {
        if (content.includes("faded")) {
          hornerOutput = "definite Horner" + extraText;
        } else {
          hornerOutput = "probable Horner" + extraText;
        }
      } else {
        hornerOutput = "possible Horner" + extraText;
      }
      return hornerOutput;
    }
  
    // Fallback conditions.
    if (horizontal && vertical) {
      return "Mixed " + horizontal.toUpperCase() + " & " + vertical.toUpperCase();
    }
    if (horizontal) {
      return horizontal.toUpperCase();
    }
    if (vertical) {
      return vertical.toUpperCase();
    }
  
    if (hasPtosis || hasSudden || hasDilated) {
      return "Palsy";
    }
  
    return "";
  }
  
  
  /**
   * Returns a numeric score for the pupil size based on key phrases.
   * Score scale (for anisocoria purposes):
   *   - "dilated pupil"  => 3
   *   - "larger pupil"   => 2 (if "slightly larger pupil" is found, then 1)
   *   - "slightly smaller pupil" => -1
   *   - "smaller pupil"  => -2
   *   - Otherwise 0 (neutral)
   *
   * @param {string} text - The lower-cased output text for one eye.
   * @returns {number} - The pupil score.
   */
  function getPupilScore(text) {
    if (text.includes("dilated pupil")) {
      return 3;
    } else if (text.includes("larger pupil")) {
      return text.includes("slightly larger pupil") ? 1 : 2;
    } else if (text.includes("slightly smaller pupil")) {
      return -1;
    } else if (text.includes("smaller pupil")) {
      return -2;
    }
    return 0;
  }
  
  /**
   * Determine pupil condition based on the output text for both eyes.
   *
   * This function compares the numeric pupil scores for both eyes.
   * If the scores are equal (difference is zero), then anisocoria is considered neutral.
   * Otherwise, if the absolute difference is 1, it reports "Slightly larger — <i>benign anisocoria</i>".
   * If the difference is 2 or more, it reports "Unilateral larger — <i>possible Adie; sluggish, viral</i>".
   *
   * @param {string} rightText - The output text for the right eye.
   * @param {string} leftText - The output text for the left eye.
   * @returns {string} - A string describing the pupil condition.
   */
  function determinePupilCondition(rightText, leftText) {
    const rText = rightText.toLowerCase();
    const lText = leftText.toLowerCase();
  
    // Check for pinhole pupils.
    if (rText.includes("pinhole pupil") && lText.includes("pinhole pupil")) {
      return "Bilateral pinhole — <i>likely old age or drugs</i>";
    }
    // Check for bilateral dilated pupils.
    if (rText.includes("dilated pupil") && lText.includes("dilated pupil")) {
      return "Bilateral dilated — <i>consider drugs or trauma</i>";
    }
  
    // Get numeric pupil scores.
    const scoreRight = getPupilScore(rText);
    const scoreLeft = getPupilScore(lText);
  
    // If scores are equal, the pupils are symmetric.
    if (scoreRight === scoreLeft) {
      return "";
    }
  
    const diff = Math.abs(scoreRight - scoreLeft);
    if (diff === 1) {
      return "Slightly larger — <i>benign anisocoria</i>";
    } else if (diff >= 2) {
      return "Unilateral larger — <i>possible Adie; sluggish, viral</i>";
    }
  
    return "";
  }
  
// Global cache variables
let lastAnalysisHTML = "";
let lastPalsyImageHTML = "";

function updateAnalysisOutput() {
  // Reset any global Horner flag if used.
  window.hornerAssigned = false;

  const rightOutputElement = document.getElementById("right-output");
  const leftOutputElement = document.getElementById("left-output");
  const analysisElement = document.querySelector(".analysis");
  const palsyImgContainer = document.getElementById("palsy-img-container");

  if (!rightOutputElement || !leftOutputElement || !analysisElement) return;

  const rightText = rightOutputElement.innerText;
  const leftText = leftOutputElement.innerText;

  // Process conditions with an eye identifier.
  const conditionRight = determineCondition(rightText, "RE");
  const conditionLeft = determineCondition(leftText, "LE");

  const clinicalRight = transformOutput(rightText, "RE");
  const clinicalLeft = transformOutput(leftText, "LE");

  // Compute numeric pupil scores.
  const scoreRight = getPupilScore(rightText.toLowerCase());
  const scoreLeft = getPupilScore(leftText.toLowerCase());

  // Final conditions for Horner syndrome.
  let finalConditionRight = conditionRight;
  let finalConditionLeft = conditionLeft;
  if (conditionRight.toLowerCase().includes("horner") && conditionLeft.toLowerCase().includes("horner")) {
    if (scoreRight === scoreLeft) {
      finalConditionRight = "";
      finalConditionLeft = "";
    } else if (Math.abs(scoreRight - scoreLeft) === 1) {
      if (scoreRight < scoreLeft) {
        // Right eye is one step more constricted.
        finalConditionLeft = "";
      } else {
        finalConditionRight = "";
      }
    }
  }

  const pupilCondition = determinePupilCondition(rightText, leftText);

  let outputHTML = "<strong>RE:</strong> " + clinicalRight.replace("RE: ", "");
  if (finalConditionRight) {
    outputHTML += " (" + finalConditionRight + ")";
  }
  outputHTML += "<br><strong>LE:</strong> " + clinicalLeft.replace("LE: ", "");
  if (finalConditionLeft) {
    outputHTML += " (" + finalConditionLeft + ")";
  }
  if (pupilCondition &&
      !finalConditionRight.toLowerCase().includes("3rd nerve palsy") &&
      !finalConditionLeft.toLowerCase().includes("3rd nerve palsy")) {
    outputHTML += "<br><strong>Pupils:</strong> " + pupilCondition;
  }

  // Only update analysisElement if content has changed.
  if (analysisElement.innerHTML !== outputHTML) {
    analysisElement.innerHTML = outputHTML;
    lastAnalysisHTML = outputHTML;
  }

  // Determine which palsy image to display.
  let palsyImageHTML = "";
  const conditionRightLower = finalConditionRight.toLowerCase();
  const conditionLeftLower = finalConditionLeft.toLowerCase();

  if (conditionRightLower.includes("3rd nerve palsy") || conditionLeftLower.includes("3rd nerve palsy")) {
    palsyImageHTML = '<img src="3.png" alt="3rd nerve palsy" class="palsy-img-outside">';
  } else if (conditionRightLower.includes("4th nerve palsy") || conditionLeftLower.includes("4th nerve palsy")) {
    palsyImageHTML = '<img src="4.png" alt="4th nerve palsy" class="palsy-img-outside">';
  } else if (conditionRightLower.includes("6th nerve palsy") || conditionLeftLower.includes("6th nerve palsy")) {
    palsyImageHTML = '<img src="6.png" alt="6th nerve palsy" class="palsy-img-outside">';
  }

  // Update the palsy image container only if content has changed.
  if (palsyImgContainer && palsyImgContainer.innerHTML !== palsyImageHTML) {
    palsyImgContainer.innerHTML = palsyImageHTML;
    lastPalsyImageHTML = palsyImageHTML;
  }
}

  
  
  // Initialise analysis once the document has loaded, then update every 500ms.
  document.addEventListener('DOMContentLoaded', function() {
    updateAnalysisOutput();
    setInterval(updateAnalysisOutput, 500);
  });
  